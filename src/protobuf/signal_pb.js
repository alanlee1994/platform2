// source: signal.proto
/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Signal.Heartbeat', null, global);
goog.exportSymbol('proto.Signal.Signal', null, global);
goog.exportSymbol('proto.Signal.Signal.Summary', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Signal.Signal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Signal.Signal.repeatedFields_, null);
};
goog.inherits(proto.Signal.Signal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Signal.Signal.displayName = 'proto.Signal.Signal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Signal.Signal.Summary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Signal.Signal.Summary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Signal.Signal.Summary.displayName = 'proto.Signal.Signal.Summary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Signal.Heartbeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Signal.Heartbeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Signal.Heartbeat.displayName = 'proto.Signal.Heartbeat';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Signal.Signal.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Signal.Signal.prototype.toObject = function(opt_includeInstance) {
  return proto.Signal.Signal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Signal.Signal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signal.Signal.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    instruments: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    signalTs: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    statsList: jspb.Message.toObjectList(msg.getStatsList(),
    proto.Signal.Signal.Summary.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Signal.Signal}
 */
proto.Signal.Signal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Signal.Signal;
  return proto.Signal.Signal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Signal.Signal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Signal.Signal}
 */
proto.Signal.Signal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstruments(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignalTs(value);
      break;
    case 5:
      var value = new proto.Signal.Signal.Summary;
      reader.readMessage(value,proto.Signal.Signal.Summary.deserializeBinaryFromReader);
      msg.addStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Signal.Signal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Signal.Signal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Signal.Signal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signal.Signal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Signal.Signal.Summary.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Signal.Signal.Summary.prototype.toObject = function(opt_includeInstance) {
  return proto.Signal.Signal.Summary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Signal.Signal.Summary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signal.Signal.Summary.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalCnt: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    winrate: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    avgWin: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    avgLose: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    medianWin: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    medianLose: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    sharpe: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    kelly: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    signalValue: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    comments: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    enterTs: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    exitTs: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Signal.Signal.Summary}
 */
proto.Signal.Signal.Summary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Signal.Signal.Summary;
  return proto.Signal.Signal.Summary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Signal.Signal.Summary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Signal.Signal.Summary}
 */
proto.Signal.Signal.Summary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTotalCnt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWinrate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAvgWin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAvgLose(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMedianWin(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMedianLose(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSharpe(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setKelly(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSignalValue(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setComments(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnterTs(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setExitTs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Signal.Signal.Summary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Signal.Signal.Summary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Signal.Signal.Summary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signal.Signal.Summary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional float total_cnt = 1;
 * @return {number}
 */
proto.Signal.Signal.Summary.prototype.getTotalCnt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.setTotalCnt = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.clearTotalCnt = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signal.Signal.Summary.prototype.hasTotalCnt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float winrate = 2;
 * @return {number}
 */
proto.Signal.Signal.Summary.prototype.getWinrate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.setWinrate = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.clearWinrate = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signal.Signal.Summary.prototype.hasWinrate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float avg_win = 3;
 * @return {number}
 */
proto.Signal.Signal.Summary.prototype.getAvgWin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.setAvgWin = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.clearAvgWin = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signal.Signal.Summary.prototype.hasAvgWin = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float avg_lose = 4;
 * @return {number}
 */
proto.Signal.Signal.Summary.prototype.getAvgLose = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.setAvgLose = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.clearAvgLose = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signal.Signal.Summary.prototype.hasAvgLose = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float median_win = 5;
 * @return {number}
 */
proto.Signal.Signal.Summary.prototype.getMedianWin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.setMedianWin = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.clearMedianWin = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signal.Signal.Summary.prototype.hasMedianWin = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float median_lose = 6;
 * @return {number}
 */
proto.Signal.Signal.Summary.prototype.getMedianLose = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.setMedianLose = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.clearMedianLose = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signal.Signal.Summary.prototype.hasMedianLose = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float sharpe = 7;
 * @return {number}
 */
proto.Signal.Signal.Summary.prototype.getSharpe = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.setSharpe = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.clearSharpe = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signal.Signal.Summary.prototype.hasSharpe = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float kelly = 8;
 * @return {number}
 */
proto.Signal.Signal.Summary.prototype.getKelly = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.setKelly = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.clearKelly = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signal.Signal.Summary.prototype.hasKelly = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float signal_value = 9;
 * @return {number}
 */
proto.Signal.Signal.Summary.prototype.getSignalValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.setSignalValue = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.clearSignalValue = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signal.Signal.Summary.prototype.hasSignalValue = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string comments = 10;
 * @return {string}
 */
proto.Signal.Signal.Summary.prototype.getComments = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.setComments = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.clearComments = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signal.Signal.Summary.prototype.hasComments = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string enter_ts = 11;
 * @return {string}
 */
proto.Signal.Signal.Summary.prototype.getEnterTs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.setEnterTs = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.clearEnterTs = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signal.Signal.Summary.prototype.hasEnterTs = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string exit_ts = 12;
 * @return {string}
 */
proto.Signal.Signal.Summary.prototype.getExitTs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.setExitTs = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Signal.Signal.Summary} returns this
 */
proto.Signal.Signal.Summary.prototype.clearExitTs = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signal.Signal.Summary.prototype.hasExitTs = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Signal.Signal.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Signal.Signal} returns this
 */
proto.Signal.Signal.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Signal.Signal} returns this
 */
proto.Signal.Signal.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signal.Signal.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string instruments = 2;
 * @return {string}
 */
proto.Signal.Signal.prototype.getInstruments = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Signal.Signal} returns this
 */
proto.Signal.Signal.prototype.setInstruments = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Signal.Signal} returns this
 */
proto.Signal.Signal.prototype.clearInstruments = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signal.Signal.prototype.hasInstruments = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string signal_ts = 3;
 * @return {string}
 */
proto.Signal.Signal.prototype.getSignalTs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Signal.Signal} returns this
 */
proto.Signal.Signal.prototype.setSignalTs = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Signal.Signal} returns this
 */
proto.Signal.Signal.prototype.clearSignalTs = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signal.Signal.prototype.hasSignalTs = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Summary Stats = 5;
 * @return {!Array<!proto.Signal.Signal.Summary>}
 */
proto.Signal.Signal.prototype.getStatsList = function() {
  return /** @type{!Array<!proto.Signal.Signal.Summary>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Signal.Signal.Summary, 5));
};


/**
 * @param {!Array<!proto.Signal.Signal.Summary>} value
 * @return {!proto.Signal.Signal} returns this
*/
proto.Signal.Signal.prototype.setStatsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Signal.Signal.Summary=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Signal.Signal.Summary}
 */
proto.Signal.Signal.prototype.addStats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Signal.Signal.Summary, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Signal.Signal} returns this
 */
proto.Signal.Signal.prototype.clearStatsList = function() {
  return this.setStatsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Signal.Heartbeat.prototype.toObject = function(opt_includeInstance) {
  return proto.Signal.Heartbeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Signal.Heartbeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signal.Heartbeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    status: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    ts: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Signal.Heartbeat}
 */
proto.Signal.Heartbeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Signal.Heartbeat;
  return proto.Signal.Heartbeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Signal.Heartbeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Signal.Heartbeat}
 */
proto.Signal.Heartbeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Signal.Heartbeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Signal.Heartbeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Signal.Heartbeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signal.Heartbeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Signal.Heartbeat.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Signal.Heartbeat} returns this
 */
proto.Signal.Heartbeat.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Signal.Heartbeat} returns this
 */
proto.Signal.Heartbeat.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signal.Heartbeat.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.Signal.Heartbeat.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Signal.Heartbeat} returns this
 */
proto.Signal.Heartbeat.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Signal.Heartbeat} returns this
 */
proto.Signal.Heartbeat.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signal.Heartbeat.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string ts = 3;
 * @return {string}
 */
proto.Signal.Heartbeat.prototype.getTs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Signal.Heartbeat} returns this
 */
proto.Signal.Heartbeat.prototype.setTs = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Signal.Heartbeat} returns this
 */
proto.Signal.Heartbeat.prototype.clearTs = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signal.Heartbeat.prototype.hasTs = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.Signal);
